#!/usr/bin/env lua
-- Prosody IM
-- Copyright (C) 2008-2009 Matthew Wild
-- Copyright (C) 2008-2009 Waqas Hussain
-- 
-- This project is MIT/X11 licensed. Please see the
-- COPYING file in the source package for more information.
--

-- Will be modified by configure script if run --

CFG_SOURCEDIR=os.getenv("PROSODY_SRCDIR");
CFG_CONFIGDIR=os.getenv("PROSODY_CFGDIR");
CFG_PLUGINDIR=os.getenv("PROSODY_PLUGINDIR");
CFG_DATADIR=os.getenv("PROSODY_DATADIR");

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- Tell Lua where to find our libraries
if CFG_SOURCEDIR then
	package.path = CFG_SOURCEDIR.."/?.lua;"..package.path;
	package.cpath = CFG_SOURCEDIR.."/?.so;"..package.cpath;
end

package.path = package.path..";"..(CFG_SOURCEDIR or ".").."/fallbacks/?.lua";
package.cpath = package.cpath..";"..(CFG_SOURCEDIR or ".").."/fallbacks/?.so";

-- Substitute ~ with path to home directory in data path
if CFG_DATADIR then
	if os.getenv("HOME") then
		CFG_DATADIR = CFG_DATADIR:gsub("^~", os.getenv("HOME"));
	end
end

-- Required to be able to find packages installed with luarocks
pcall(require, "luarocks.require");

-- Replace require() with one that doesn't pollute _G, required
-- for neat sandboxing of modules
do
	local _realG = _G;
	local _real_require = require;
	function require(...)
		local curr_env = getfenv(2);
		local curr_env_mt = getmetatable(getfenv(2));
		local _realG_mt = getmetatable(_realG);
		if curr_env_mt and curr_env_mt.__index and not curr_env_mt.__newindex and _realG_mt then
			local old_newindex
			old_newindex, _realG_mt.__newindex = _realG_mt.__newindex, curr_env;
			local ret = _real_require(...);
			_realG_mt.__newindex = old_newindex;
			return ret;
		end
		return _real_require(...);
	end
end

-- Load the config-parsing module
config = require "core.configmanager"

-- -- -- --
-- Define the functions we call during startup, the 
-- actual startup happens right at the end, where these
-- functions get called

function read_config()
	-- TODO: Check for other formats when we add support for them
	-- Use lfs? Make a new conf/ dir?
	local filenames = {};
	
	local filename;
	if arg[1] == "--config" and arg[2] then
		table.insert(filenames, arg[2]);
		if CFG_CONFIGDIR then
			table.insert(filenames, CFG_CONFIGDIR.."/"..arg[2]);
		end
	else
		table.insert(filenames, (CFG_CONFIGDIR or ".").."/prosody.cfg.lua");
	end
	for _,_filename in ipairs(filenames) do
		filename = _filename;
		local file = io.open(filename);
		if file then
			file:close();
			CFG_CONFIGDIR = filename:match("^(.*)[\\/][^\\/]*$");
			break;
		end
	end
	local ok, level, err = config.load(filename);
	if not ok then
		print("\n");
		print("**************************");
		if level == "parser" then
			print("A problem occured while reading the config file "..(CFG_CONFIGDIR or ".").."/prosody.cfg.lua");
			local err_line, err_message = tostring(err):match("%[string .-%]:(%d*): (.*)");
			print("Error"..(err_line and (" on line "..err_line) or "")..": "..(err_message or tostring(err)));
			print("");
		elseif level == "file" then
			print("Prosody was unable to find the configuration file.");
			print("We looked for: "..(CFG_CONFIGDIR or ".").."/prosody.cfg.lua");
			print("A sample config file is included in the Prosody download called prosody.cfg.lua.dist");
			print("Copy or rename it to prosody.cfg.lua and edit as necessary.");
		end
		print("More help on configuring Prosody can be found at http://prosody.im/doc/configure");
		print("Good luck!");
		print("**************************");
		print("");
		os.exit(1);
	end
end

function load_libraries()
	-- Initialize logging
	require "core.loggingmanager"
	
	-- Check runtime dependencies
	require "util.dependencies"
	
	-- Load socket framework
	server = require "net.server"
end	

function init_global_state()
	bare_sessions = {};
	full_sessions = {};
	hosts = {};

	-- Global 'prosody' object
	prosody = {};
	local prosody = prosody;
	
	prosody.bare_sessions = bare_sessions;
	prosody.full_sessions = full_sessions;
	prosody.hosts = hosts;
	
	prosody.paths = { source = CFG_SOURCEDIR, config = CFG_CONFIGDIR, 
	                  plugins = CFG_PLUGINDIR, data = CFG_DATADIR };
	
	prosody.arg = _G.arg;

	prosody.events = require "util.events".new();
	
	prosody.platform = "unknown";
	if os.getenv("WINDIR") then
		prosody.platform = "windows";
	elseif package.config:sub(1,1) == "/" then
		prosody.platform = "posix";
	end
	
	prosody.installed = nil;
	if CFG_SOURCEDIR and (prosody.platform == "windows" or CFG_SOURCEDIR:match("^/")) then
		prosody.installed = true;
	end
	
	-- Function to reload the config file
	function prosody.reload_config()
		log("info", "Reloading configuration file");
		prosody.events.fire_event("reloading-config");
		local ok, level, err = config.load((rawget(_G, "CFG_CONFIGDIR") or ".").."/prosody.cfg.lua");
		if not ok then
			if level == "parser" then
				log("error", "There was an error parsing the configuration file: %s", tostring(err));
			elseif level == "file" then
				log("error", "Couldn't read the config file when trying to reload: %s", tostring(err));
			end
		end
		return ok, (err and tostring(level)..": "..tostring(err)) or nil;
	end

	-- Function to reopen logfiles
	function prosody.reopen_logfiles()
		log("info", "Re-opening log files");
		eventmanager.fire_event("reopen-log-files"); -- Handled by appropriate log sinks
		prosody.events.fire_event("reopen-log-files");
	end

	-- Function to initiate prosody shutdown
	function prosody.shutdown(reason)
		log("info", "Shutting down: %s", reason or "unknown reason");
		prosody.shutdown_reason = reason;
		prosody.events.fire_event("server-stopping", {reason = reason});
		server.setquitting(true);
	end

	-- Load SSL settings from config, and create a ctx table
	local global_ssl_ctx = rawget(_G, "ssl") and config.get("*", "core", "ssl");
	if global_ssl_ctx then
		local default_ssl_ctx = { mode = "server", protocol = "sslv23", capath = "/etc/ssl/certs", verify = "none", options = "no_sslv2"; };
		setmetatable(global_ssl_ctx, { __index = default_ssl_ctx });
		prosody.global_ssl_ctx = global_ssl_ctx;
	end

	local cl = require "net.connlisteners";
	function prosody.net_activate_ports(option, listener, default, conntype)
		conntype = conntype or (global_ssl_ctx and "tls") or "tcp";
		if not cl.get(listener) then return; end
		local ports = config.get("*", "core", option.."_ports") or default;
		if type(ports) == "number" then ports = {ports} end;
		
		if type(ports) ~= "table" then
			log("error", "core."..option.." is not a table");
		else
			for _, port in ipairs(ports) do
				if type(port) ~= "number" then
					log("error", "Non-numeric "..option.."_ports: "..tostring(port));
				else
					cl.start(listener, { 
						ssl = conntype ~= "tcp" and global_ssl_ctx,
						port = port,
						interface = config.get("*", "core", option.."_interface") 
							or cl.get(listener).default_interface 
							or config.get("*", "core", "interface"),
						type = conntype
					});
				end
			end
		end
	end
end

function read_version()
	-- Try to determine version
	local version_file = io.open((CFG_SOURCEDIR or ".").."/prosody.version");
	if version_file then
		prosody.version = version_file:read("*a"):gsub("%s*$", "");
		version_file:close();
		if #prosody.version == 12 and prosody.version:match("^[a-f0-9]+$") then
			prosody.version = "hg:"..prosody.version;
		end
	else
		prosody.version = "unknown";
	end
end

function load_secondary_libraries()
	--- Load and initialise core modules
	require "util.import"
	require "core.xmlhandlers"
	require "core.rostermanager"
	require "core.eventmanager"
	require "core.hostmanager"
	require "core.modulemanager"
	require "core.usermanager"
	require "core.sessionmanager"
	require "core.stanza_router"

	require "net.http"
	
	require "util.array"
	require "util.datetime"
	require "util.iterators"
	require "util.timer"
	require "util.helpers"
	
	pcall(require, "util.signal") -- Not on Windows
	
	-- Commented to protect us from 
	-- the second kind of people
	--[[ 
	pcall(require, "remdebug.engine");
	if remdebug then remdebug.engine.start() end
	]]

	require "net.connlisteners";
	
	require "util.stanza"
	require "util.jid"
end

function init_data_store()
	local data_path = config.get("*", "core", "data_path") or CFG_DATADIR or "data";
	require "util.datamanager".set_data_path(data_path);
	require "util.datamanager".add_callback(function(username, host, datastore, data)
		if config.get(host, "core", "anonymous_login") then
			return false;
		end
		return username, host, datastore, data;
	end);
end

function prepare_to_start()
	-- Signal to modules that we are ready to start
	eventmanager.fire_event("server-starting");
	prosody.events.fire_event("server-starting");

	-- start listening on sockets
	prosody.net_activate_ports("c2s", "xmppclient", {5222});
	prosody.net_activate_ports("s2s", "xmppserver", {5269});
	prosody.net_activate_ports("component", "xmppcomponent", {}, "tcp");
	prosody.net_activate_ports("legacy_ssl", "xmppclient", {}, "ssl");

	prosody.start_time = os.time();
end	

function init_global_protection()
	-- Catch global accesses --
	local locked_globals_mt = { __index = function (t, k) error("Attempt to read a non-existent global '"..k.."'", 2); end, __newindex = function (t, k, v) error("Attempt to set a global: "..tostring(k).." = "..tostring(v), 2); end }
		
	function prosody.unlock_globals()
		setmetatable(_G, nil);
	end
	
	function prosody.lock_globals()
		setmetatable(_G, locked_globals_mt);
	end

	-- And lock now...
	prosody.lock_globals();
end

function loop()
	-- Error handler for errors that make it this far
	local function catch_uncaught_error(err)
		if type(err) == "string" and err:match("interrupted!$") then
			return "quitting";
		end
		
		log("error", "Top-level error, please report:\n%s", tostring(err));
		local traceback = debug.traceback("", 2);
		if traceback then
			log("error", "%s", traceback);
		end
		
		prosody.events.fire_event("very-bad-error", {error = err, traceback = traceback});
	end
	
	while select(2, xpcall(server.loop, catch_uncaught_error)) ~= "quitting" do
		socket.sleep(0.2);
	end
end

function cleanup()
	log("info", "Shutdown status: Cleaning up");
	prosody.events.fire_event("server-cleanup");
	
	-- Ok, we're quitting I know, but we
	-- need to do some tidying before we go :)
	server.setquitting(false);
	
	log("info", "Shutdown status: Closing all active sessions");
	for hostname, host in pairs(hosts) do
		log("debug", "Shutdown status: Closing client connections for %s", hostname)
		if host.sessions then
			local reason = { condition = "system-shutdown", text = "Server is shutting down" };
			if prosody.shutdown_reason then
				reason.text = reason.text..": "..prosody.shutdown_reason;
			end
			for username, user in pairs(host.sessions) do
				for resource, session in pairs(user.sessions) do
					log("debug", "Closing connection for %s@%s/%s", username, hostname, resource);
					session:close(reason);
				end
			end
		end
	
		log("debug", "Shutdown status: Closing outgoing s2s connections from %s", hostname);
		if host.s2sout then
			for remotehost, session in pairs(host.s2sout) do
				if session.close then
					session:close("system-shutdown");
				else
					log("warn", "Unable to close outgoing s2s session to %s, no session:close()?!", remotehost);
				end
			end
		end
	end

	log("info", "Shutdown status: Closing all server connections");
	server.closeall();
	
	server.setquitting(true);
end

-- Are you ready? :)
read_config();
load_libraries();
init_global_state();
read_version();
log("info", "Hello and welcome to Prosody version %s", prosody.version);
load_secondary_libraries();
init_data_store();
init_global_protection();
prepare_to_start();

eventmanager.fire_event("server-started");
prosody.events.fire_event("server-started");

loop();

log("info", "Shutting down...");
cleanup();
eventmanager.fire_event("server-stopped");
prosody.events.fire_event("server-stopped");
log("info", "Shutdown complete");

